name: Build and Push Container with Podman

on:
  release:
    types: [created]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      contents: write
      packages: write
      pull-requests: write
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Get release version
        id: get_version
        run: |
          # Extract version from GitHub release tag (remove 'v' prefix if present)
          VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Release version: $VERSION"

      - name: Validate version format
        run: |
          if ! echo "${{ env.VERSION }}" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Error: Invalid version format. Use 'major.minor.patch' format (e.g., 1.2.3)."
            exit 1
          fi

      - name: Check current version in pyproject.toml
        id: check-version
        run: |
          CURRENT_VERSION=$(grep -oP '^version = "\K[^"]+' pyproject.toml)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "Current version: $CURRENT_VERSION"

      - name: Create branch for version update
        if: env.CURRENT_VERSION != env.VERSION
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          BRANCH_NAME="release-${{ env.VERSION }}"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Update version in pyproject.toml
        if: env.CURRENT_VERSION != env.VERSION
        run: |
          echo "Updating version to ${{ env.VERSION }} in pyproject.toml..."
          sed -i -E "s/^version = \".*\"/version = \"${{ env.VERSION }}\"/" pyproject.toml
          echo "Version updated to ${{ env.VERSION }} in pyproject.toml."

      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman
          podman --version

      - name: Log in to GitHub Container Registry with Podman
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | podman login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build container image with Podman
        run: |
          podman build -t ekiree-dashboard:${{ env.VERSION }} .

      - name: Tag and push container image with Podman
        run: |
          podman tag ekiree-dashboard:${{ env.VERSION }} ghcr.io/ekiree-technology/ekiree-dashboard:${{ env.VERSION }}
          podman push ghcr.io/ekiree-technology/ekiree-dashboard:${{ env.VERSION }}

      - name: Commit version changes
        if: env.CURRENT_VERSION != env.VERSION
        run: |
          git add pyproject.toml
          git commit -m "release-${{ env.VERSION }}"
          git push --set-upstream origin ${{ env.BRANCH_NAME }}

      - name: Create Pull Request using GitHub CLI
        if: env.CURRENT_VERSION != env.VERSION
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Install GitHub CLI
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
          
          # Create PR
          gh pr create --title "Bump version to ${{ env.VERSION }}" \
                       --body "This PR updates the version in pyproject.toml to ${{ env.VERSION }}. The container image has been built and pushed to GitHub Container Registry: ghcr.io/ekiree-technology/ekiree-dashboard:${{ env.VERSION }}" \
                       --base master \
                       --head ${{ env.BRANCH_NAME }}
